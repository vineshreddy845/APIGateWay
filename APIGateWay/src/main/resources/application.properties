eureka.client.serviceUrl.defaultZone= http://localhost:8761/eureka/
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
spring.application.name=API-Gateway
server.port=8087
#coustmer details --> lb means loadbalancer and coustmerdetails pasted below uri from eureka server instance name means spring.application name=coustmerdetails.
#wriitten in propertites files in coustmerdetails microservice application.
#API gateway automatically send request to our microservice api using below way.
# it also moniter maintain loadbalancer. we don't want include loadbalancer as we used in coustmerdetail microservice.
#predicators menas the path of api we used in coustmerdetails application.
#example:user send request(frontend) that url should match below path. then only you will get response.
#coustmerdetails
spring.cloud.gateway.routes[0].id=coustmer-details
spring.cloud.gateway.routes[0].uri=lb://COUSTMERDETAILS
spring.cloud.gateway.routes[0].predicates[0]=Path=/details/call 
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# there many ways to match the request for predicates.
#example see below.
#spring.cloud.gateway.routes[0].id=myroute
#spring.cloud.gateway.routes[0].uri=http://example.com
#spring.cloud.gateway.routes[0].predicates[0]=Header=X-Custom-Header,custom-value
#spring.cloud.gateway.routes[0].predicates[1]=Query=foo,bar
#spring.cloud.gateway.routes[0].predicates[2]=Path=/mypath/**
#spring.cloud.gateway.routes[0].predicates[3]=Method=GET

#below https method calls another method see in coustmerdetails application.
#important thing is below method calls another method has loadbalancer see in code.
#here two loabalancing is working.
spring.cloud.gateway.routes[1].id=coustmer-details
spring.cloud.gateway.routes[1].uri=lb://COUSTMERDETAILS
spring.cloud.gateway.routes[1].predicates[0]=Path=/details/checksss/{coustmerid}/{name}

#below https method calls another method see in coustmerdetails application.
#important thing is below method calls another method has loadbalancer see in code.
#here two loabalancing is working.
spring.cloud.gateway.routes[2].id=coustmer-details
spring.cloud.gateway.routes[2].uri=lb://COUSTMERDETAILS
spring.cloud.gateway.routes[2].predicates[0]=Path=/details/checkss/{coustmerid}/{name}

#coustmerbankdetails
#now we use filters.
spring.cloud.gateway.routes[3].id=COUSTMER-BANKDETAILS
spring.cloud.gateway.routes[3].uri=lb://COUSTMERBANKDETAILS
spring.cloud.gateway.routes[3].predicates[0]=Path=/details/checking/{coustmerid}
spring.cloud.gateway.routes[3].filters[0]=SetPath=/bankdetails/checking/{coustmerid}
#right here we send request from postman http://localhost:8087/details/checking/1(frontend) -> route will match these with predicates path=/details/checking/{coustmerid}.
#but send request to filters[0]=SetPath=/bankdetails/checking/{coustmerid}.That is filters.




